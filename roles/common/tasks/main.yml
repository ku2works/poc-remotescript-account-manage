---
- name: create users group
  group:
    name: "{{ user_group }}"

- name: create user and group registration
  user:
    name: "{{ item.name }}"
    password: "{{ item.password | password_hash('sha512', 'proptechplus') }}"
    group: "{{ user_group }}"
    groups: "{{ user_group }}"
    append: yes
  with_items: "{{ users }}"

# required to run authorized_key module on Amazon Linux
- name: install libselinux-python
  yum: name=libselinux-python state=present
  when: "ansible_distribution == 'Amazon'" # determining Amazon Linux

- name: registering public key
  authorized_key:
    user: "{{ item.name }}"
    key: "{{ item.public_key }}"
  with_items: "{{ users }}"

- name: clear sftp settings
  shell: sed -i -e '/{{ sftp_placeholder_start }}/,/{{ sftp_placeholder_end }}/d' /etc/ssh/sshd_config
  args:
    warn: no
  register: config_reset
  failed_when: config_reset.rc not in [0, 1]
  changed_when: false

- name: add header sftp managed configuration marker
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    line: "{{ sftp_placeholder_start }}"
    regexp: "^{{ sftp_placeholder_start }}"
    insertbefore: "^Match user"
    firstmatch: yes
  changed_when: false

- name: add footer sftp managed configuration marker
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    line: "{{ sftp_placeholder_end }}"
    regexp: "^{{ sftp_placeholder_end }}"
  changed_when: false

- name: add SFTP settings
  lineinfile:
    state: present
    dest: /etc/ssh/sshd_config
    validate: "/usr/sbin/sshd -T -f %s"
    line: "{{ 'Match user ' ~ item.name ~ '\n\tChrootDirectory /var/www/vhosts/gyro\n\tForceCommand internal-sftp -u 002' }}"
    regexp: "Match user {{ item.name }}"
    insertbefore: "^{{ sftp_placeholder_end }}"
  notify:
    - restart sshd
  when: "item.name != 'saito'"
  with_items: "{{ users }}"
  changed_when: false

- name: get users
  shell: 'getent group {{ user_group }} | cut -d: -f4 | tr "," "\n" | grep -v "ec2-user"'
  register: current_users
  changed_when: false

- name: delete user not in user list
  user:
    name: "{{ item }}"
    groups: "{{ user_group }}"
    state: absent
    remove: yes
  with_items: "{{ current_users.stdout_lines | difference(users | map(attribute='name') | list) }}"
